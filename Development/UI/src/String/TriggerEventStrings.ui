[TriggerEventStrings]

// 触发器事件字符串
// Special events not defined in common.j,
// handled internally by the editor

MapInitializationEvent="地图初始化"
MapInitializationEvent="地图初始化"
MapInitializationEventHint="该事件发生在读取地图时."

#ifndef DISABLE_YDTRIGGER
YDWEDisableRegister="休眠 [YDWE]"
YDWEDisableRegister="休眠"
YDWEDisableRegisterHint="休眠后，当前触发器不会在读取地图时进行注册，需要手动激活."
#endif

// Game events

TriggerRegisterVariableEvent="实数变量事件"
TriggerRegisterVariableEvent=~变量" 的值 ",~Operation," ",~值
TriggerRegisterVariableEventHint="这个事件只适用于实数类型的变量."

TriggerRegisterGameLoadedEventBJ="游戏读档"
TriggerRegisterGameLoadedEventBJ="读取游戏存档"
TriggerRegisterGameLoadedEventBJHint="当游戏读取完毕时,该事件生效."

TriggerRegisterGameSavedEventBJ="游戏存档"
TriggerRegisterGameSavedEventBJ="保存游戏存档"
TriggerRegisterGameSavedEventBJHint="在切入保存游戏界面前,该事件生效."

TriggerRegisterShowSkillEventBJ="英雄技能按钮被点击"
TriggerRegisterShowSkillEventBJ="英雄技能按钮被点击"
TriggerRegisterShowSkillEventBJHint=

TriggerRegisterBuildSubmenuEventBJ="建造建筑按钮被点击"
TriggerRegisterBuildSubmenuEventBJ="建造建筑按钮被点击"
TriggerRegisterBuildSubmenuEventBJHint=

TriggerRegisterGameEvent="比赛游戏事件"
TriggerRegisterGameEvent="该游戏将在 ",~Event Type," 后结束"
TriggerRegisterGameEventHint="该事件只出现在Battle.net的自动匹配游戏."


// Timer events
TriggerRegisterGameStateEventTimeOfDay="游戏时间事件"
TriggerRegisterGameStateEventTimeOfDay="当游戏时间 ",~Operation," ",~时间
TriggerRegisterGameStateEventTimeOfDayHint="游戏时间采用24小时制.早上从6:00开始,下午从18:00开始."

TriggerRegisterTimerEventSingle="游戏计时(单次)"
TriggerRegisterTimerEventSingle="当游戏逝去 ",~Time," 秒"
TriggerRegisterTimerEventSingleHint="从事件开始的那一刻开始计时."

TriggerRegisterTimerEventPeriodic="游戏计时(循环)"
TriggerRegisterTimerEventPeriodic="每当游戏逝去 ",~Time," 秒"
TriggerRegisterTimerEventPeriodicHint="从事件开始的那一刻开始计时,直到计时完毕后双重新开始计时."

TriggerRegisterTimerExpireEventBJ="计时器到期"
TriggerRegisterTimerExpireEventBJ=~计时器," 到期"
TriggerRegisterTimerExpireEventBJHint="当计时器到0时触发该事件. 循环计时器可以多次触发该事件. 使用'事件响应 - 到期的计时器'来获取该计时器."


// Dialog events
TriggerRegisterDialogEventBJ="对话框被点击"
TriggerRegisterDialogEventBJ=~对话框," 被点击"
TriggerRegisterDialogEventBJHint="通过 '事件响应 - 被点击的对话框' 操作事件中的对话框."

TriggerRegisterDialogButtonEvent="对话框按钮被点击 [R]"
TriggerRegisterDialogButtonEvent=~对话框按钮," 被点击"
TriggerRegisterDialogButtonEventHint="指定对话框按钮被点击,该事件一般需要在其他触发为其添加."


// Trackable events
TriggerRegisterTrackableHitEvent="鼠标点击可追踪物 [R]"
TriggerRegisterTrackableHitEvent="鼠标点击 ",~可追踪物
TriggerRegisterTrackableHitEventHint=

TriggerRegisterTrackableTrackEvent="鼠标移动到追踪对象 [R]"
TriggerRegisterTrackableTrackEvent="鼠标移动到 ",~可追踪物
TriggerRegisterTrackableTrackEventHint=

// Player events
TriggerRegisterPlayerChatEvent="输入聊天信息"
TriggerRegisterPlayerChatEvent=~玩家," 输入 ",~Text," ,信息过滤方式 ",~Match Type
TriggerRegisterPlayerChatEventHint="事件ID是(096)"

TriggerRegisterPlayerEventEndCinematic="按下Esc键"
TriggerRegisterPlayerEventEndCinematic=~玩家," 按下Esc键(跳过电影)"
TriggerRegisterPlayerEventEndCinematicHint="该事件在玩家按下'Escape'键时触发(可能是玩家要跳过当前所播放的电影)."

TriggerRegisterPlayerSelectionEventBJ="选择单位事件"
TriggerRegisterPlayerSelectionEventBJ=~玩家," ",~Selects/Deselects," 一个单位"
TriggerRegisterPlayerSelectionEventBJHint="通过'事件回应 - 触发单位' 操作被玩家选择的单位."

TriggerRegisterPlayerKeyEventBJ="键盘事件"
TriggerRegisterPlayerKeyEventBJ=~玩家," ",~Presses/Releases," ",~Key," "
TriggerRegisterPlayerKeyEventBJHint="目前游戏只支持'Up/Down/Left/Right'四个方向键."

TriggerRegisterPlayerStateEvent="属性事件"
TriggerRegisterPlayerStateEvent=~玩家," 的 ",~Property," 属性 ",~Operation," ",~值
TriggerRegisterPlayerStateEventHint=""

TriggerRegisterPlayerEventAllianceChanged="联盟状态事件(任意状态)"
TriggerRegisterPlayerEventAllianceChanged=~玩家," 改变联盟状态设定"
TriggerRegisterPlayerEventAllianceChangedHint=

TriggerRegisterPlayerAllianceChange="联盟状态更改(指定项目)"
TriggerRegisterPlayerAllianceChange=~Player," 更改 ",~Alliance Type," 设置"
#ifndef DISABLE_YDTRIGGER
TriggerRegisterPlayerAllianceChangeHint="当改变项目为【共享单位】时，(触发玩家)会不生效，此时不建议使用【任意玩家】事件。"
#else
TriggerRegisterPlayerAllianceChangeHint=
#endif

TriggerRegisterPlayerEventVictory="游戏胜利"
TriggerRegisterPlayerEventVictory=~玩家," 胜利后离开游戏"
TriggerRegisterPlayerEventVictoryHint=

TriggerRegisterPlayerEventDefeat="游戏失败"
TriggerRegisterPlayerEventDefeat=~玩家," 失败后离开游戏"
TriggerRegisterPlayerEventDefeatHint=

TriggerRegisterPlayerEventLeave="离开游戏"
TriggerRegisterPlayerEventLeave=~玩家," 离开游戏"
TriggerRegisterPlayerEventLeaveHint="这个事件通过玩家离开游戏来开启."


// Destructible events
TriggerRegisterDeathEvent="可破坏物死亡"
TriggerRegisterDeathEvent=~可破坏物," 死亡"
TriggerRegisterDeathEventHint="使用'事件响应 - 死亡的可破坏物'来获取死亡物体."

TriggerRegisterDestDeathInRegionEvent="可破坏物在区域内死亡(矩形区域)"
TriggerRegisterDestDeathInRegionEvent="可破坏物在 ",~矩形区域," 内死亡"
TriggerRegisterDestDeathInRegionEventHint="默认该事件只能监视最多64个可破坏物. 可以使用'设置 bj_destInRegionDiesCount'来设置该值. 不建议新手使用该触发."


// Item events
TriggerRegisterItemDeathEvent="物品被破坏 [R]"
TriggerRegisterItemDeathEvent=~物品," 被破坏"
TriggerRegisterItemDeathEventHint=

//YD Event Trigger
YDWESyStemAnyUnitDamagedRegistTrigger="任意单位伤害事件"
YDWESyStemAnyUnitDamagedRegistTrigger="任意单位 接受伤害"
YDWESyStemAnyUnitDamagedRegistTriggerHint="若触发器动作里有对单位造成伤害动作，会引起死循环，最好加入条件判断或在伤害前关闭当前触发器。不推荐新手使用。"

YDWESyStemItemUnmovableRegistTrigger="任意单位移动物品事件"
YDWESyStemItemUnmovableRegistTrigger="任意单位 移动物品栏里的物品"
YDWESyStemItemUnmovableRegistTriggerHint="若触发器动作里有移动物品的动作，会引起死循环，最好将移动物品的动作放到别的触发器内或移动物品前关闭当前触发器。"

YDWESyStemItemCombineRegistTrigger="任意单位合成物品事件"
YDWESyStemItemCombineRegistTrigger="任意单位 合成一件物品"
YDWESyStemItemCombineRegistTriggerHint="用来响应物品合成系统，当有物品被合成时，可以用‘最后合成的物品’捕捉到；合成该物品的单位则可用‘触发单位’捕捉到"

YDWESyStemAbilityCastingOverRegistTrigger="任意单位施放特殊技能结束"
YDWESyStemAbilityCastingOverRegistTrigger="任意单位施放特殊技能 ",~特殊技能," 结束"
YDWESyStemAbilityCastingOverRegistTriggerHint="用来响应跳跃、环绕、钩子等YDWE提供的特殊技能，可用‘最后结束施放特殊技能的单位’来捕捉施放技能单位"

// Unit events
TriggerRegisterUnitEvent="指定单位事件""
TriggerRegisterUnitEvent=~指定单位," ",~事件
TriggerRegisterUnitEventHint=

TriggerRegisterPlayerUnitEventSimple="玩家单位事件"
TriggerRegisterPlayerUnitEventSimple=~Player," 的单位 ",~Event
TriggerRegisterPlayerUnitEventSimpleHint=
//TriggerRegisterPlayerUnitEventSimpleHint="若使用接受伤害事件，而触发器动作里有对单位造成伤害动作时，容易引起死循环，最好加入条件判断或在伤害前关闭当前触发器。"

TriggerRegisterAnyUnitEventBJ="任意单位事件"
TriggerRegisterAnyUnitEventBJ="任意单位 ",~Event
TriggerRegisterAnyUnitEventBJHint=
//TriggerRegisterAnyUnitEventBJHint="若使用接受伤害事件，而触发器动作里有对单位造成伤害动作时，容易引起死循环，最好加入条件判断或在伤害前关闭当前触发器。"

TriggerRegisterEnterRectSimple="单位进入矩形区域"
TriggerRegisterEnterRectSimple="任意单位进入 ",~矩形区域
TriggerRegisterEnterRectSimpleHint="使用'事件响应 - 进入的单位'来响应进入该区域的单位. 事实上是创建不规则区域，并注册单位进入不规则区域事件,所以之后改动该矩形区域对事件不会产生任何影响."

TriggerRegisterLeaveRectSimple="单位离开矩形区域"
TriggerRegisterLeaveRectSimple="任意单位离开 ",~矩形区域
TriggerRegisterLeaveRectSimpleHint="使用'事件响应 - 离开的单位'来响应离开该区域的单位. 事实上是创建不规则区域，并注册单位离开不规则区域事件,所以之后改动该矩形区域对事件不会产生任何影响."

TriggerRegisterEnterRegionSimple="单位进入不规则区域 [R]"
TriggerRegisterEnterRegionSimple="任意单位进入 ",~区域
TriggerRegisterEnterRegionSimpleHint="使用'事件响应 - 进入的单位'来响应进入该区域的单位. 该事件需要在其他触发为其添加."

TriggerRegisterLeaveRegionSimple="单位离开不规则区域 [R]"
TriggerRegisterLeaveRegionSimple="任意单位离开 ",~区域
TriggerRegisterLeaveRegionSimpleHint="使用'事件响应 - 离开的单位'来响应离开该区域的单位. 该事件需要在其他触发为其添加."

TriggerRegisterEnterRegion="单位进入不规则区域(指定条件) [R]"
TriggerRegisterEnterRegion="单位进入 ",~区域," 并满足 ",~条件
TriggerRegisterEnterRegionHint="使用'事件响应 - 进入的单位'来响应进入该区域的单位. 该事件需要在其他触发为其添加."

TriggerRegisterLeaveRegion="单位离开不规则区域(指定条件) [R]"
TriggerRegisterLeaveRegion="单位离开 ",~区域," 并满足 ",~条件
TriggerRegisterLeaveRegionHint="使用'事件响应 - 离开的单位'来响应离开该区域的单位. 该事件需要在其他触发为其添加."

TriggerRegisterUnitInRangeSimple="进入指定单位的范围"
TriggerRegisterUnitInRangeSimple="任意单位进入 ",~范围," 以 ",~Unit," 为中心的范围内"
TriggerRegisterUnitInRangeSimpleHint="通过 '事件响应 - 触发单位' 来获取进入范围的单位."

TriggerRegisterUnitLifeEvent="生命值变化"
TriggerRegisterUnitLifeEvent=~指定单位," 的生命值变为 ",~Operation," ",~Value
TriggerRegisterUnitLifeEventHint="从不成立变为成立时触发该事件. 注意:该参照值在注册事件时即被确定为常量,是不会变动的."

TriggerRegisterUnitManaEvent="魔法值变化"
TriggerRegisterUnitManaEvent=~指定单位," 的魔法值变为",~Operation," ",~Value
TriggerRegisterUnitManaEventHint="从不成立变为成立时触发该事件. 注意:该参照值在注册事件时即被确定为常量,是不会变动的."

